services:

  nginx:
    environment:
      - FULLCHAIN_FILE=/run/secrets/server_cert
      - PRIVKEY_FILE=/run/secrets/server_key
    secrets:
      - server_cert
      - server_key
    build: ./requirements/nginx
    container_name: nginx
    depends_on: 
      - api-gateway
    ports:
      - "4443:443"
    volumes:
      - ./requirements/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./requirements/nginx/conf.d:/etc/nginx/conf.d
      - pong:/var/www/html/pong
    restart: always

  api-gateway:
    container_name: api-gateway
    secrets:
      - api_cert
      - api_key
    build: requirements/api-gateway
    depends_on:
      - auth-service
      - 2fa-service

  auth-service:
    container_name: auth-service
    build: requirements/auth-service
    secrets:
      - secret_key
    volumes:
      - pong:/var/www/html/pong
      - ${PROJECT_PATH}/srcs/data/pong:/app/database #share db file - PROJECT_PATH defined in Makefile
    environment:
      - SECRET_KEY_FILE=/run/secrets/secret_key
  
  2fa-service:
    container_name: 2fa-service
    build: requirements/2fa-service
    secrets:
      - email_user
      - email_password
    environment:
      - NODE_ENV=production
      - PORT=3003
      - CORS_ORIGINS=http://localhost:4443
      - EMAIL_USER_FILE=/run/secrets/email_user
      - EMAIL_PASSWORD_FILE=/run/secrets/email_password
    restart: unless-stopped
    volumes:
      - 2fa_data:/usr/src/app/data

  # New WebSocket service
  ws-server:
    container_name: ws-server
    build: requirements/ws-server
    secrets:
      - server_cert  # Share the same certs as nginx
      - server_key
    environment:
      - NODE_ENV=production
      - CERT_PATH=/run/secrets/server_cert
      - KEY_PATH=/run/secrets/server_key
    ports:
      - "3002:3002"  # Internal port for WebSocket server
    depends_on:
      - auth-service  # If you need authentication
    restart: unless-stopped
    healthcheck:
      disable: true
  
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    container_name: es01
    environment:
      - node.name=es01
      - discovery.type=single-node
      - xpack.security.enabled=false
      # Para dev local: HTTPS desactivado (actívalo en prod)
      - xpack.security.http.ssl.enabled=false
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ES_JAVA_OPTS=${ES_JAVA_OPTS}
      - KIBANA_PASSWORD=${KIBANA_SYSTEM_PASSWORD}
      - xpack.security.autoconfiguration.enabled=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "127.0.0.1:9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s -u elastic:${ELASTIC_PASSWORD} http://localhost:9200 >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30
  logstash:
    image: docker.elastic.co/logstash/logstash:${ELASTIC_VERSION}
    container_name: ls01
    environment:
      - LS_JAVA_OPTS=${LS_JAVA_OPTS}
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - XPACK_MONITORING_ENABLED=false
      - XPACK_MONITORING_ELASTICSEARCH_USERNAME=elastic
      - XPACK_MONITORING_ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - http.host=0.0.0.0
    volumes:
      - ./requirements/logstash/pipeline:/usr/share/logstash/pipeline  # ← Ruta actualizada
      - ./requirements/logstash/config:/usr/share/logstash/config
    ports:
      - "127.0.0.1:5050:5050" # TCP JSON input (app -> Logstash)
      - "127.0.0.1:5051:5051"
      - "127.0.0.1:5044:5044" # Beats input (Filebeat -> Logstash)
    depends_on:
      - elasticsearch
  kibana:
    image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION}
    container_name: kib01
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_SYSTEM_PASSWORD}
      - ELASTICSEARCH_REQUEST_TIMEOUT=120000

    ports:
      - "127.0.0.1:5601:5601"
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:5601/api/status >/dev/null || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 30

networks:
  default:
    name: transcendence-network
    driver: bridge

volumes:
  pong:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/srcs/data/pong
      o: bind
  2fa_data:
    driver: local
  esdata:

secrets:
  server_cert:
    file: ./secrets/cert.pem
  server_key:
    file: ./secrets/key.pem
  api_cert:
    file: ./secrets/apicert.pem
  api_key:
    file: ./secrets/apikey.pem
  email_user:
    file: ./secrets/email_user.txt
  email_password:
    file: ./secrets/email_password.txt
  secret_key:
    file: ./secrets/secret_key.txt
  

